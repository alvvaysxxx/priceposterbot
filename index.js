const mongoose = require("mongoose");
const { Bot, InlineKeyboard } = require("grammy");
const BotModel = require("./models/Bot");
const User = require("./models/User");
const Post = require("./models/Post");
const Promo = require("./models/Promo");
const schedule = require("node-schedule");
const { ToadScheduler, SimpleIntervalJob, Task } = require("toad-scheduler");
const scheduler = new ToadScheduler();

const { exec, spawn } = require("child_process");

process.on("uncaughtException", function (err) {
  console.error(err);
  console.log("Node NOT Exiting...");
});

// ! Production
const uri =
  "mongodb+srv://urionzzz:79464241@cluster0.1ioriuw.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";

// ! Development
//const uri =
//  "mongodb+srv://urionzzz:79464241Ru!@cluster0.u09fzh7.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";

const clientOptions = {
  serverApi: { version: "1", strict: true, deprecationErrors: true },
};

async function run() {
  // Create a Mongoose client with a MongoClientOptions object to set the Stable API version
  await mongoose.connect(uri, clientOptions);
  await mongoose.connection.db.admin().command({ ping: 1 });
  console.log("Pinged your deployment. You successfully connected to MongoDB!");
}
run().catch(console.dir);

// Create an instance of the `Bot` class and pass your bot token to it.

// ! Production
const bot = new Bot("6548429406:AAEKot9_x9kJfu_0tw41Evg43AsohnIp7So");

// ! Development
// const bot = new Bot("7017953999:AAFTEuXrzYvbh44r6C-rahA8dp3fRtBoYmU"); // <-- put your bot token between the ""

// You can now register listeners on your bot object `bot`.
// grammY will call the listeners when users send messages to your bot.

// Handle the /start command.
let bots = [];

const task = new Task("simple task", () => handleClientBots());
const job = new SimpleIntervalJob({ seconds: 10 }, task);

scheduler.addSimpleIntervalJob(job);

function findArrayDifference(arr1, arr2) {
  // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ –º–∞—Å—Å–∏–≤–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏
  const copyArr1 = [...arr1];
  const copyArr2 = [...arr2];

  // –£–¥–∞–ª—è–µ–º –∏–∑ –ø–µ—Ä–≤–æ–π –∫–æ–ø–∏–∏ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤–æ –≤—Ç–æ—Ä–æ–π –∫–æ–ø–∏–∏
  for (let i = 0; i < copyArr1.length; i++) {
    const indexInArr2 = copyArr2.indexOf(copyArr1[i]);
    if (indexInArr2 !== -1) {
      copyArr1.splice(i, 1);
      copyArr2.splice(indexInArr2, 1);
      i--; // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    }
  }

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –æ–±–µ–∏—Ö –∫–æ–ø–∏–π
  const diffArray = copyArr1.concat(copyArr2);

  return diffArray;
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –∫  –±–æ—Ç–∞–º –∫–ª–∏–µ–Ω—Ç–æ–≤
async function handleClientBots() {
  try {
    let dbBots = await BotModel.find();
    if (bots.length == 0) {
      bots = dbBots;
      console.log("assigned");
    } else {
      if (bots.length == dbBots.length) {
        console.log("–Ω–æ–≤—ã—Ö –±–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
        return;
      }
      if (bots.length > dbBots.length) {
        bots = dbBots;
        return;
      }
      console.log("–Ω–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –±–æ—Ç—ã, –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏");
      bots = findArrayDifference(bots, dbBots);
    }
    for (let i = 0; i < bots.length; i++) {
      const childProcess = spawn("node", ["client.js", bots[i].token]);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞
      childProcess.stdout.on("data", (data) => {
        console.log(`–î–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞: ${data}`);
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ—à–∏–±–æ–∫
      childProcess.on("error", (error) => {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: ${error.message}`);
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
      childProcess.on("exit", (code, signal) => {
        console.log(
          `–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –∫–æ–¥–æ–º ${code} –∏ —Å–∏–≥–Ω–∞–ª–æ–º ${signal}`
        );
      });
    }
  } catch (err) {
    console.error(err);
  }
}

bot.command("start", async (ctx) => {
  try {
    await bot.api.sendPhoto(ctx.chat.id, "https://i.imgur.com/KGRQOF5.png", {
      caption: `üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${ctx.chat.first_name}!</b>\n\nPrice Poster - —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–π –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–∫–æ–≤.\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–Ω–µ–ª—å\nüëá`,
      parse_mode: "HTML",
    });
    let candidate = await User.findOne({ chatid: ctx.chat.id });
    if (!candidate) {
      let user = new User({
        chatid: ctx.chat.id,
        username: ctx.chat.username,
      });
      await bot.api.sendMessage(
        ctx.chat.id,
        `üéÅ –ö–∞–∫ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –≤–∞–º <b>2 –¥–Ω—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞</b>, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—à —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª\n\n–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞, –≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –æ–ø–ª–∞—á–∏–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–∏—Å–∞:\n<blockquote>2$ - 2 –¥–Ω—è\n8$ - 7 –¥–Ω–µ–π\n26$ - 30 –¥–Ω–µ–π\n43$ - 60 –¥–Ω–µ–π\n70$ - 90 –¥–Ω–µ–π</blockquote>`,
        { parse_mode: "HTML" }
      );
      user.ActiveUntil = Date.now() + 2 * 24 * 60 * 60 * 1000;
      user.subscription = true;

      await user.save();
    }
  } catch (err) {
    console.error(err);
  }
});

bot.command("newpromo", async (ctx) => {
  try {
    if (ctx.chat.id != "6709838943" && ctx.chat.id != "806166779") {
      return await ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.");
    }
    const days = ctx.match;
    let newPromo = new Promo({
      days,
    });
    await newPromo.save();
    await ctx.reply(`–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ ${days} –¥–Ω–µ–π:\n<b>${newPromo._id}</b>`, {
      parse_mode: "HTML",
    });
  } catch (err) {
    console.error(err);
  }
});

bot.start();
